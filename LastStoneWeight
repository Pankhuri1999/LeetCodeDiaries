LAST STONE WEIGHT - 
You are given an array of integers stones where stones[i] is the weight of the ith stone.
We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights x and y with x <= y. 
The result of this smash is:
If x == y, both stones are destroyed, and
If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.
At the end of the game, there is at most one stone left.
Return the weight of the last remaining stone. If there are no stones left, return 0.


Code - 
class Solution {
public:
    int lastStoneWeight(vector<int>& stones) {
        sort(stones.begin(), stones.end(), greater<int>());
        //make_heap(stones.begin(), stones.end());
        //int n = stones.size();
        while(stones.size() > 1)
        {
            if (stones[0] == stones[1]) 
            {
                stones.erase(stones.begin(), stones.begin()+2);
            }
            else
            {
                stones[0] = stones[0] - stones[1];
                stones.erase(stones.begin()+1, stones.begin()+2);
                sort(stones.begin(), stones.end(), greater<int>());
            }
            // int tmp1 = stones.front();
            // stones.pop_back();
            // int tmp2 = stones.front();
            // stones.pop_back();
            // stones.push_back(tmp1 - tmp2);
            // cout<<"++  "<<st<<endl;
            //stones.erase (stones.begin()+n-2);
            //stones.erase (stones.begin()+n-1);
            //stones.erase(stones.begin() + n-2, stones.begin() + n-1);
            //stones.push_back(tmp);
            //sort(stones.begin(), stones.end());
        }
        if (stones.size() == 0)
        {
            return 0;
        }
        return stones[0];

    }
};
