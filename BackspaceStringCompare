BACHSPACE STRING COMPARE
Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.
Note that after backspacing an empty text, the text will continue empty.



Code - 
class Solution {
public:
    bool backspaceCompare(string s, string t) {

        // int i = 0, j = 0;
        // while(i<s.size())
        // {
        //    if ((s[i] == '#') && (i>0))
        //     {
        //         cout<<"first-- "<<s<<endl;
        //         s.erase(i-1, 2);
        //         cout<<"second-- "<<s<<endl;
        //         i = 0;
        //     } 
        // }
        // while(j<s.size())
        // {
        //    if ((t[j] == '#') && (j>0))
        //     {
        //         cout<<"first-- "<<t<<endl;
        //         s.erase(j-1, 2);
        //         cout<<"second-- "<<t<<endl;
        //         j = 0;
        //     } 
        // }
        for(int i = 0; i<s.size(); i++)
        {
            if ((s[i] == '#') && (i>0))
            {
                cout<<"first-- "<<s<<"  - i --"<<i<<s.size()<<endl;
                s.erase(i-1, 2);
                cout<<"second-- "<<s<<"  - i --"<<i<<s.size()<<endl;
                i = 0;
            }

        }
        for(int i = 0; i<t.size(); i++)
        {
            if ((t[i] == '#') && (i>0))
            {
                cout<<"t1-- "<<t<<"  - i --"<<i<<t.size()<<endl;
                t.erase(i-1, 2);
                cout<<"t2-- "<<t<<"  - i --"<<i<<t.size()<<endl;
                i = 0;
            }

        }
        std::erase(s, '#');
        std::erase(t, '#');
        cout<<"s - "<<s<<" t - "<<t<<endl;
        return s==t;
    }
};
